js에서 배열선언
-> var 배열명=new Array();

js에서 배열은 자바와 다르게 동적 할당이다

배열의 원소로는 객체도 가능하다
-> arr[0] = 객체; 로 할당하고 객체.멤버로 호출하던 것처럼 arr[0].멤버로 똑같이 호출 가능하다

js에서는 function생성자로 자바의 class와 같은 객체를 생성할 수 있다(js에도 class 생성자가 있음)
-> class로 만드는 객체와 function으로 만든 객체는 'var 인스턴스명=new 객체명'으로 생성



[---Vector와 ArrayList---]

ArrayList는 기존의 Vector를 개선한 것으로 구현원리와 기능적으로 동일
-> Vector는 자체적으로 동기화처리가 되어 있으나 ArrayList는 그렇지 않다(싱글쓰레드에서 Vector는 비효율적이다)
-> List인터페이스를 구현하므로, 저장순서가 유지되고 중복을 허용

ArrayList는 생성하면 기본적으로 길이 10인 배열이 생성됨(10byte)
ArrayList에 기본형 값도 추가할 수 있다
-> 원래는 기본형객체를 사용해 추가해줘야 했지만 JDK1.5부터 생긴 오토박싱 기능으로 인해 그냥 값만 적어주어도 자동으로 변환되어 들어간다
list.add(new Integer(333)); -> list.add(333);
add() : 저장하고 싶은 위치가 있으면 add()메소드의 첫번째 매개변수로 index를 주고 두번째에 값을 입력해주면 된다
indexOf() : 지정된 객체의 위치를 리턴
remove() : 지정된 위치의 객체를 삭제(타입 확인 필수)하고 boolean리턴
반복문으로 remove를 사용해 객체들을 삭제하면 List의 크기와 지정하려는 index값에 문제가 생기므로 뒤에서부터 지워줘야한다
remove를 통한 저장된 객체의 삭제과정 :
1. n번째 객체를 지우려고 하면 n+1번째 객체부터 저장된 마지막 객체까지 복사해서 n번째 객체 위치에서부터 차례로 덮어쓴다
2 데이터가 한칸씩 이동했으므로 마지막 데이터는 null로 변경
3. 데이터가 삭제되어 데이터의 개수가 줄었으므로 size의 값은 감소시킨다
set() : 지정된 위치의 객체를 다른 객체로 변경
get() : 지정된 위치의 객체를 리턴

Vector의 크기와 용량
-> 크기 : 저장된 객체의 개수
-> 용량 : 배열의 길이
trimToSize() : 빈 공간(null)을 없앤다
ensureCapacity(n) : 배열의 용량이 n보다 작으면 6으로 만들어준다
setSize() : size가 7이 되게 한다(size가 capacity를 넘어서면 자동적으로 capacity를 2배로 만들어준다) 
clear() : Vector에 저장된 모든 요소를 제거한다(배열 내부를 모두 null로 만들고 size를 0으로 만듬, capcacity는 그대로)

Vector를 직접 구현하기
1. 객체를 저장할 객체배열과 크기를 저장할 변수를 선언
2. 생성자 MyVector(int capacity)와 기본생성자 MyVector()를 선언
3. 메소드 구현
-> int size() : 컬렉션의 크기(size, 객체배열에 저장된 객체의 개수)를 리턴
-> int capacity() : 컬렉션의 용량을 리턴
-> boolean isEmpty() : 컬렉션이 비어있는지 확인
-> void clear() : 컬렉션의 객체를 모두 제거(객체배열의 모든 요소를 null)



[---ArrayList와 LinkedList---]

ArrayList의 장점과 단점

장점 : 배열은 구조가 간단하고 데이터를 읽는 데 걸리는 시간(접근시간, access time)이 짧다
단점1 : 크기를 변경할 수 없다
-> 크기를 변경해야 하는 경우 새로운 배열을 생성 후 데이터를 복사해야 함
-> 크기 변경을 피하기 위해 충분히 큰 배열을 생성하면, 메모리가 낭비됨
단점2 : 비순차적인 데이터의 추가, 삭제에 시간이 많이 걸린다
-> 데이터를 추가하거나 삭제하기 위해, 다른 데이터를 옮겨야 함
-> 그러나 순차적인 데이터 추가(끝에 추가)와 삭제(끝부터 삭제)는 빠르다

LinkedList(배열의 단점을 보완)
-> 링크드 리스트는 불연속적으로 존재하는 데이터를 연결
-> 데이터의 삭제 : 단 한번의 참조변경만으로 가능
-> LinkedList의 요소들은 Node라는 클래스로 정의되어 있음
class Node{
	Node next;
	Object obj;
}
next는 다음 노드의 주소
obj는 데이터
-> 데이터의 추가와 삭제는 단순히 Node의 연결만 변경하면 된다

이중 연결리스트(doubly linked list)
-> 기존 LinkedList는 Node에 다음 요소의 주소만 있으므로 단방향의 접근만 가능하므로 접근성이 나쁨
-> Node에 previous도 추가해 각 요소의 앞 뒤로 이동할 수 있게 접근성 향상

이중 원형 연결리스트(doubly circular linked list)
-> 이중 연결리스트와 같지만 첫Node와 마지막 Node를 연결시켜놓음

LinkedList는 실제로 이중 연결 리스트로 구현되어 있음
(이중 원형 연결리스트가 기본이었던적이 있었지만 성능 차이가 크지않아 이중으로 바꿈)

ArrayList vs LinkedList 성능비교
1. 순차적으로 데이터를 추가/삭제 - ArrayList가 빠름
2. 비순차적으로 데이터를 추가/삭제 - LinkedList가 빠름
3. 접근시간(access time) - ArrayList가 빠름
4. ArrayList는 비효율적인 메모리 사용, LinkedList는 데이터가 많을수록 접근성이 떨어짐